export interface VXsToolsPluginSettings {
	templateFolder: string;
    macroFolder: string;
}

export const DEFAULT_SETTINGS: VXsToolsPluginSettings = {
	templateFolder: '_templates',
    macroFolder: '_macros'
}

/*
		AbstractTextComponent: ()=>jI,
			App: ()=>VJ,
			BaseComponent: ()=>VI,
			ButtonComponent: ()=>qI,
			ColorComponent: ()=>$I,
			Component: ()=>lf,
			DropdownComponent: ()=>XI,
			EditableFileView: ()=>vI,
			Editor: ()=>Ow,
			EditorSuggest: ()=>ag,
			Events: ()=>ug,
			ExtraButtonComponent: ()=>UI,
			FileManager: ()=>zj,
			FileSystemAdapter: ()=>Ud,
			FileView: ()=>mI,
			FuzzySuggestModal: ()=>Zj,
			HoverPopover: ()=>u_,
			ItemView: ()=>hI,
			Keymap: ()=>bm,
			MarkdownPreviewRenderer: ()=>GA,
			MarkdownPreviewSection: ()=>UA,
			MarkdownPreviewView: ()=>wP,
			MarkdownRenderChild: ()=>qA,
			MarkdownRenderer: ()=>vP,
			MarkdownSourceView: ()=>JU,
			MarkdownView: ()=>QW,
			Menu: ()=>rg,
			MenuItem: ()=>ng,
			MenuSeparator: ()=>ig,
			MetadataCache: ()=>KU,
			Modal: ()=>EU,
			MomentFormatComponent: ()=>YI,
			Notice: ()=>fI,
			Platform: ()=>ct,
			Plugin: ()=>MW,
			PluginSettingTab: ()=>TW,
			PopoverState: ()=>$U,
			PopoverSuggest: ()=>wm,
			Scope: ()=>vm,
			Setting: ()=>HI,
			SettingTab: ()=>Sj,
			SliderComponent: ()=>ZI,
			SuggestModal: ()=>Xj,
			TAbstractFile: ()=>XE,
			TFile: ()=>$E,
			TFolder: ()=>QE,
			TextAreaComponent: ()=>KI,
			TextComponent: ()=>WI,
			TextFileView: ()=>e_,
			ToggleComponent: ()=>_I,
			ValueComponent: ()=>zI,
			Vault: ()=>JE,
			View: ()=>uI,
			ViewRegistry: ()=>L_,
			Workspace: ()=>gW,
			WorkspaceContainer: ()=>nj,
			WorkspaceFloating: ()=>hW,
			WorkspaceItem: ()=>Q_,
			WorkspaceLeaf: ()=>aj,
			WorkspaceParent: ()=>J_,
			WorkspaceRibbon: ()=>cW,
			WorkspaceRoot: ()=>uW,
			WorkspaceSidedock: ()=>tj,
			WorkspaceSplit: ()=>ej,
			WorkspaceTabs: ()=>rj,
			WorkspaceWindow: ()=>pW,
			addIcon: ()=>Cf,
			apiVersion: ()=>PJ,
			arrayBufferToBase64: ()=>q,
			arrayBufferToHex: ()=>G,
			base64ToArrayBuffer: ()=>z,
			debounce: ()=>qe,
			editorEditorField: ()=>BP,
			editorInfoField: ()=>RP,
			editorLivePreviewField: ()=>HP,
			editorViewField: ()=>NP,
			finishRenderMath: ()=>TA,
			fuzzySearch: ()=>Im,
			getAllTags: ()=>xS,
			getBlobArrayBuffer: ()=>We,
			getIcon: ()=>wf,
			getIconIds: ()=>Ef,
			getLinkpath: ()=>bS,
			hexToArrayBuffer: ()=>W,
			htmlToMarkdown: ()=>NE,
			iterateCacheRefs: ()=>kS,
			iterateRefs: ()=>CS,
			livePreviewState: ()=>iF,
			loadMathJax: ()=>kA,
			loadMermaid: ()=>vA,
			loadPdfJs: ()=>dA,
			loadPrism: ()=>bA,
			moment: ()=>tF,
			normalizePath: ()=>he,
			parseFrontMatterAliases: ()=>Jb,
			parseFrontMatterEntry: ()=>$b,
			parseFrontMatterStringArray: ()=>Qb,
			parseFrontMatterTags: ()=>ew,
			parseLinktext: ()=>wS,
			parseYaml: ()=>JO,
			prepareFuzzySearch: ()=>Am,
			prepareQuery: ()=>Dm,
			prepareSimpleSearch: ()=>Nm,
			removeIcon: ()=>xf,
			renderMatches: ()=>Hm,
			renderMath: ()=>CA,
			renderResults: ()=>Rm,
			request: ()=>v_,
			requestUrl: ()=>g_,
			requireApiVersion: ()=>OJ,
			resolveSubpath: ()=>DS,
			sanitizeHTMLToDom: ()=>OM,
			setIcon: ()=>kf,
			sortSearchResults: ()=>Om,
			stringifyYaml: ()=>eF,
			stripHeading: ()=>MS,
			stripHeadingForLink: ()=>TS
		
		let Id = /\u00A0/g;
		function Od(e) {
			return e.replace(Id, " ")
		}

		*/